{"version":3,"sources":["components/book-display.components.js","App.js","serviceWorker.js","index.js"],"names":["BookDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeBookTitle","bind","assertThisInitialized","onSubmit","state","Book_title","items","isLoaded","e","setState","target","value","preventDefault","searchTitle","console","log","todo_description","todo_responsible","todo_priority","todo_completed","react_default","a","createElement","style","marginTop","className","type","onChange","Component","App","BrowserRouter","Link","to","Route","path","exact","component","SavedBooks","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RA4EeA,qBAvEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,kBAAoBP,EAAKO,kBAAkBC,KAAvBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACzBA,EAAKU,SAAWV,EAAKU,SAASF,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAEhBA,EAAKW,MAAQ,CACTC,WAAY,GACZC,MAAO,GACPC,UAAU,GAVCd,iFAeDe,GACdZ,KAAKa,SAAS,CACVJ,WAAYG,EAAEE,OAAOC,yCAIpBH,GACLA,EAAEI,iBACF,IACUC,EAAcjB,KAAKQ,MAAMC,WAC/BS,QAAQC,IAAIF,GAEZjB,KAAKa,SAAS,CACVO,iBAAkB,GAClBC,iBAAkB,GAClBC,cAAe,GACfC,gBAAgB,kFAYxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAACC,UAAW,KACrBJ,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,QAAMnB,SAAUP,KAAKO,UACjBiB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SACII,KAAK,OACLD,UAAU,eACVd,MAAOf,KAAKQ,MAAMC,WAClBsB,SAAU/B,KAAKI,qBAIvBoB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,SACII,KAAK,SACLf,MAAM,cACNc,UAAU,8BA9DZG,+BC8BXC,mLA1BX,OACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAEbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iDACbL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,IAAIP,UAAU,gBAAvB,sBACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,4BACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,sBACZL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YACZL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,IAAIP,UAAU,YAAvB,iBAEFL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YACZL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,UAAUP,UAAU,YAA7B,mBAMRL,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW7C,IACjC6B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWC,eArBxBT,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.87fd0e23.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nclass BookDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // This block of code is needed to grant access to the state for the following methods listed below\r\n        this.onChangeBookTitle = this.onChangeBookTitle.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            Book_title: '',\r\n            items: [],\r\n            isLoaded: false,\r\n        }\r\n    }\r\n  \r\n    // Form handling function\r\n    onChangeBookTitle(e) {\r\n        this.setState({\r\n            Book_title: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const myAPIKey = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\r\n            const searchTitle = this.state.Book_title;\r\n            console.log(searchTitle);\r\n    \r\n            this.setState({\r\n                todo_description: '',\r\n                todo_responsible: '',\r\n                todo_priority: '',\r\n                todo_completed: false\r\n            })\r\n    }    \r\n\r\n    // run component did mount\r\n    componentDidMount() {\r\n    // call onsubmit handler function\r\n    // call fetch method\r\n    // \r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div style= {{marginTop: 20}}>\r\n                <h3>Search for a book:</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Title: </label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            value={this.state.Book_title} \r\n                            onChange={this.onChangeBookTitle}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group\">\r\n                        <input \r\n                            type=\"submit\"\r\n                            value=\"Search book\"\r\n                            className=\"btn btn-primary\"\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n};\r\n\r\nexport default BookDisplay;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport BookDisplay from './components/book-display.components';\nimport SavedBooks from './components/saved-books.components';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          \n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to=\"/\" className=\"navbar-brand\">GoogleBooks Search</Link>\n            <div className=\"collapse navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item\">\n                  <Link to=\"/\" className=\"nav-link\">Search Books</Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Saved Books</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n\n          <Route path=\"/\" exact component={BookDisplay} />\n          <Route path=\"/saved\" component={SavedBooks} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}